#!/usr/bin/env bash
set -e

# check if root and ask for password if not
if [[ $EUID -ne 0 ]]; then
  printf 'Script must be executed as super user.\n'
  exit 1
fi

clean_files() {
  files=(
    '/etc/X11/xinit/xinitrc.d/nvidia'
    '/etc/X11/xinit/xinitrc.d/intel'
    '/etc/X11/xorg.conf.d/00-avoid-glamor.conf'
    '/etc/X11/xorg.conf.d/99-nvidia.conf'
    '/etc/X11/xorg.conf'
  )

# remove unuseful files, but check if they exist first
	for file in "${files[@]}"; do
		if [[ -h $file ]]; then
			printf "Deleting: %s\n" "$file"
			[ -e $file ]&& rm -f "$file"
		elif [[ -f $file ]]; then
			printf "Backing up: %s as %s\n" "$file" "$file.prime.bak"
			[ -s $file ]&& cp "$file" "$file.prime.bak"
			[ -s $file ]&& rm -f "$file"
		fi
	done
}
install_dir='/etc/nvidia-prime'
conf=$1

current_display=$(xrandr --current| grep "connected"| grep "[0-9]\{3,4\}[x]"| sed -n "s/\ (.*$//p")
connected_display=$(xrandr --current| grep -w "connected"| awk '{print $1}')
xrandr_outputs(){
	unset scrn
	unset def
	if [[ $conf == nvidia ]]; then
		xrandr_source='NVIDIA-0'
		xrandr_sink='modesetting'
	else
		xrandr_source="Intel"
		xrandr_sink='Intel'
	fi
	if [[ $conf == nvidia ]]; then
		printf "xrandr --setprovideroutputsource $xrandr_sink $xrandr_source\n" > $install_dir/xinitrc.$conf
		printf "xrandr" >> $install_dir/xinitrc.$conf
	else
		printf "xrandr" > $install_dir/xinitrc.$conf
	fi
	for all_dsp in ${connected_display[@]}; do
		output_class=$(printf "$all_dsp"|sed -n "s/[[:digit:]]\|[[:punct:]]//g;p")
		output_num=$(printf "$all_dsp"|sed -n "s/[[:alpha:]]\|[[:punct:]]//g;p")
		if [[ $conf == nvidia ]]; then
			connected_output=$output_class'-'$output_num
		else
			[[ $output_class == VGA ]]&& output_num=1
			connected_output=$output_class$output_num
		fi
		if [[ $(xrandr --current| grep "$all_dsp"| grep -o "[0-9]\{3,4\}[x]") ]]; then
			current_output=$(xrandr --current| grep "$all_dsp"| grep "[0-9]\{3,4\}[x]"| sed -n "s/\ (.*$//p")
			current_output=$( printf "$current_output"| sed -n "s/\ /\_/g;p"|tr "\n" " ")
			for scrn in ${current_output}; do
				scrn=$(printf "$scrn"| sed -n "s/\_/\ /g;p")
				if [[ $(printf "$scrn"| grep -o "primary") != '' ]]; then
					scrn=$(echo "$scrn"| sed -n "s/ \(primary\)//;s/$/ primary/p")
				fi
				mode=( ${scrn} )
				for pos in ${mode[2]}; do
					def=( $(printf "$pos"| sed -n "s/\+\|\x/\ /g;p") )
				done
				if [[ ${mode[3]} ]]; then prim="--${mode[3]}"; else prim=''; fi
				printf " --output $connected_output --mode ${def[0]}x${def[1]} --pos ${def[2]}x${def[3]} $prim" >> $install_dir/xinitrc.$conf
			done

		else
			printf " --output $connected_output --off" >> $install_dir/xinitrc.$conf
		fi
	done
	printf "\n" >> $install_dir/xinitrc.$conf
	chmod 755 $install_dir/xinitrc.$conf
}
go_for_nvidia(){
	clean_files
	keyword=nvidia
    bus_id=$(lspci | grep NVIDIA | awk '{print $1 + 0}')
    if [[ ! $(cat $install_dir/xorg.nvidia.conf|grep -o "$bus_id:0:0") ]]; then
    	perl -ni -pe "s|bus_id|$bus_id|i" $install_dir/xorg.nvidia.conf
    fi
    if [[ ! $(cat $install_dir/xorg.nvidia.conf|grep -o "$nv_xorg_path") ]]; then
    	perl -ni -pe "s|/usr/lib64/nvidia/xorg|$nv_xorg_path|i" $install_dir/xorg.nvidia.conf
    fi
    cp -f $install_dir/xorg.nvidia.conf /etc/X11/xorg.conf
    if [[ $current_display ]]; then
    	xrandr_outputs
    fi
    ln -sf $install_dir/xinitrc.nvidia /etc/X11/xinit/xinitrc.d/nvidia
}
go_for_intel(){
	clean_files
	keyword=intel
	if [[ $current_display ]]; then
		xrandr_outputs
	fi
	ln -sf $install_dir/xinitrc.intel /etc/X11/xinit/xinitrc.d/intel
	cp -f $install_dir/xorg.intel.conf /etc/X11/xorg.conf
}

case $1 in
	nvidia )
		go_for_nvidia
	;;
	intel )
		go_for_intel
	;;
	*|help )
		printf "Usage:\t$(basename $0 ) intel|nvidia|nvidiaonly|remove\n\n"
		printf "\tintel\t\tSwitch to Intel GPU.\n"
		printf "\tnvidia\t\tSwitch to Nvidia GPU.\n"
		printf "\tnvidiaonly\tSwitch to Nvidia GPU permanently.\n"
		printf "\tusage: use nvidia option first, then nvidiaonly for permanent switch.\n"
		printf "\tremove\t\tRemove permanent Nvidia switch.\n"
		printf "\thelp\t\tthis help.\n"
		printf "\n\tYou need to logout from your session after each function.\n\n"
		exit 1
	;;
esac

ldconfig
if [ -f /etc/X11/xinit/xinitrc.d/$keyword ]; then
	printf "\nSuccessfully switched to %s completed.\n" "$1"
	printf "Please logout for changes to take effect.\n"
else
	printf "\nSwitch to %s doesn't ended as expected\n" "$1"
	printf "Please, run script again or check custom values.\n"
fi
